class Solution: dfs
    def minimumTotal(self, triangle: List[List[int]]) -> int:
        @cache
        def dfs(i,j):
            if i == len(triangle):
                return 0
            
            lower_left = triangle[i][j] + dfs(i+1,j)
            lower_right = triangle[i][j] + dfs(i+1,j+1)

            return min(lower_left,lower_right)
        return dfs(0,0)

class Solution: dp 
    def minimumTotal(self, triangle: List[List[int]]) -> int:
        # Start from the second last row and move upwards
        for i in range(len(triangle) - 2, -1, -1):
            for j in range(len(triangle[i])):
                # Update current cell with the min path sum from the two cells below
                triangle[i][j] += min(triangle[i+1][j], triangle[i+1][j+1])
        
        # The top element now contains the minimum path sum
        return triangle[0][0]
