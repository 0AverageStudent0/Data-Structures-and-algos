#min heap nlogk tc and o(k) sc
class Solution:
    def findKthLargest(self, nums: List[int], k: int) -> int:
        heap = []
        for num in nums:
            heapq.heappush(heap,num)
            if len(heap) > k:
                heapq.heappop(heap)
        return heap[0]
#max heap o(n + klogn) tc and sc o(n)
class Solution:
    def findKthLargest(self, nums: List[int], k: int) -> int:
        heap = [-num for num in nums]
        heapq.heapify(heap)
        for _ in range(k-1):
            heapq.heappop(heap)
        return -heap[0]

#can also sort and return kth element nlogn
#there is also a quick select algo TLE n^^2 solution n sc
class Solution:
    def findKthLargest(self, nums: List[int], k: int) -> int:
        k = len(nums) - k

        def quickSelect(l , r):
            pivot = nums[r]
            p = l
            for i in range(l,r):
                if nums[i] <= pivot:
                    nums[p],nums[i] = nums[i],nums[p]
                    p += 1
            nums[p],nums[r] = nums[r],nums[p]

            if p > k:
                return quickSelect(l,p - 1)
            elif p < k :
                return quickSelect(p+1 , r)
            else:
                return nums[p]
        return quickSelect(0,len(nums)-1)

